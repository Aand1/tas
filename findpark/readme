##################### 
Readme for running the findpark node.
#####################
author: Quirin KÃ¶rner | ga34diz 
#####################
cmake is changed, do not forget:
set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++11")

! You will need open CV (2.4.x) to run this.
#####################

If you want to run it with the real car. Roslaunch the run_system
#roslaunch tas run_system

Once you want to find a parking spot start findpark. You need to generate a map before (make a real round).
#roslaunch findpark findpark.launch

Once the start position for parking is reached. Run the parking node.
#rosrun parking parking

######################
How it works:
The findparking needs a created map, with at leat one reachable parking spot.
This map must be stored in the standard map folder.

Once the findpark node is started it will search for possible parking spots.
Following limitations are set at the moment:
- A parking spot has to be at a wall (paralell)
- The parkingspot is limited by two paper boxes
- The distance between the paper boxes is exactly like thee distance of the "original" parking spot
These restrictions can be modified in the code.

Once the car detected a possible parking spot. The current goal of the pathplanning is changed to 50cm distance to wall (Y) and 100cm distance (X) to the first box. If the goal position is not reachable (wall, out of map) it's excluded of the possible parking spots list.

As the parking node only support parkingspots left of the car, the findpark node only uses parkingspots at the left.

Once the goal is reached the findpark node is shut down, and the user can start the parking node manually. This starts the parking procedure discribed in the readme of the parking node.
#######################